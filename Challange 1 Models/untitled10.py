# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LbLhiKAqb1dyHdsFuh29KBbHc-4sUf3M
"""

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import Subset, DataLoader
from numpy.random import RandomState
from sklearn.metrics import classification_report


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
            nn.Conv2d(32, 64, kernel_size=3, padding=1),  # New layer
            nn.BatchNorm2d(64),  # New layer
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2)  # New layer
        )
        self.fc_layers = nn.Sequential(
            nn.Dropout(0.25),
            nn.Linear(64 * 4 * 4, 256),  # Adjusted for new layer
            nn.ReLU(inplace=True),
            nn.Linear(256, 10)
        )

    def forward(self, x):
        x = self.conv_layers(x)
        x = x.view(-1, 64 * 4 * 4)  # Adjusted for new layer
        x = self.fc_layers(x)
        return x


normalize = transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[0.247, 0.243, 0.261])
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.RandomAffine(degrees=10, translate=(0.1, 0.1), scale=(0.9, 1.1)),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),
    transforms.ToTensor(),
    normalize,
    ])
transform_val = transforms.Compose([
    transforms.ToTensor(),
    normalize,
])

cifar_train = datasets.CIFAR10(root='.', train=True, download=True, transform=transform_train)
cifar_val = datasets.CIFAR10(root='.', train=False, transform=transform_val)



def create_data_loaders(seed, num_classes=10, samples_per_class=25):
    np.random.seed(seed)
    torch.manual_seed(seed)

    all_class_indices = [np.where(np.array(cifar_train.targets) == i)[0] for i in range(num_classes)]

    train_indices = []
    for class_indices in all_class_indices:
        train_indices.extend(np.random.choice(class_indices, samples_per_class, replace=False))

    val_indices = np.concatenate([class_indices[:100] for class_indices in all_class_indices])

    train_subset = Subset(cifar_train, train_indices)
    val_subset = Subset(cifar_val, val_indices)

    train_loader = DataLoader(train_subset, batch_size=50, shuffle=True)  # Total batch size = num_classes * samples_per_class
    val_loader = DataLoader(val_subset, batch_size=100, shuffle=False)  # Adjust as needed

    return train_loader, val_loader

fixed_seed = 1
train_loader, val_loader = create_data_loaders(fixed_seed)

train_class_counts = np.bincount(np.array([label for _, labels in train_loader for label in labels]))
val_class_counts = np.bincount(np.array([label for _, labels in val_loader for label in labels]))

print(f"Training class counts: {train_class_counts}")
print(f"Validation class counts: {val_class_counts}")

def mixup_data(x, y, alpha=1.0, device='cuda'):
    '''Compute the mixup data. Return mixed inputs, pairs of targets, and lambda'''
    if alpha > 0:
        lam = np.random.beta(alpha, alpha)
    else:
        lam = 1
    batch_size = x.size()[0]
    index = torch.randperm(batch_size).to(device)
    
    mixed_x = lam * x + (1 - lam) * x[index, :]
    y_a, y_b = y, y[index]
    return mixed_x, y_a, y_b, lam


def train(model, device, train_loader, optimizer, criterion, epoch, alpha=1.0):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()

        mixed_data, target_a, target_b, lam = mixup_data(data, target, alpha, device)
        output = model(mixed_data)
        loss = lam * criterion(output, target_a) + (1 - lam) * criterion(output, target_b)
        
        loss.backward()
        optimizer.step()


def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.cross_entropy(output, target, reduction='sum').item()  # Or use criterion if needed
            pred = output.argmax(dim=1, keepdim=True)
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    accuracy = 100. * correct / len(test_loader.dataset)
    return test_loss, accuracy




device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


class_counts = [np.sum(np.array(cifar_train.targets) == i) for i in range(10)]
total = np.sum(class_counts)
class_weights = torch.tensor([total/class_counts[i] for i in range(10)], dtype=torch.float32).to(device)
criterion = nn.CrossEntropyLoss(weight=class_weights)


for seed in range(1, 11):
    model = Net().to(device)
    #optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9, weight_decay=0.0005)
    optimizer = optim.RMSprop(model.parameters(), lr=0.0001 , momentum=0.9, weight_decay=1e-4)
    #optimizer = optim.RMSprop(model.parameters(), lr=0.001, weight_decay=1e-4)
    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)


    train_loader, val_loader = create_data_loaders(seed)

    num_epochs = 10
    for epoch in range(1, num_epochs + 1):
        train(model, device, train_loader, optimizer, criterion, epoch, alpha=0.2)  
        scheduler.step() 

    test_loss, accuracy = test(model, device, val_loader)



def test(model, device, test_loader):
    model.eval()
    all_preds = []
    all_targets = []
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            _, preds = torch.max(output, 1)
            all_preds.extend(preds.view(-1).cpu().numpy())
            all_targets.extend(target.view(-1).cpu().numpy())

    # Calculate overall accuracy
    accuracy = np.mean(np.array(all_preds) == np.array(all_targets))

    # Generate a classification report
    class_report = classification_report(all_targets, all_preds, digits=2)

    return class_report, accuracy


class_report, accuracy = test(model, device, val_loader)
print(f'Test Accuracy: {accuracy * 100:.2f}%\n')
print('Classification Report:')
print(class_report)

